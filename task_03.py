import networkx as nx
import matplotlib.pyplot as plt
import heapq

#Створюємо порожній граф
metro_graph = nx.Graph()

#Червона лінія з вагами, а саме час в хвилинах між станціями
red_line = [
    ("Академмістечко", "Житомирська", 5),
    ("Житомирська", "Святошин", 3),
    ("Святошин", "Нивки", 4),
    ("Нивки", "Берестейська", 2),
    ("Берестейська", "Шулявська", 3),
    ("Шулявська", "Політехнічний інститут", 2),
    ("Політехнічний інститут", "Вокзальна", 4),
    ("Вокзальна", "Університет", 2),
    ("Університет", "Театральна", 1),
    ("Театральна", "Хрещатик", 2),
    ("Хрещатик", "Арсенальна", 3),
    ("Арсенальна", "Дніпро", 2),
    ("Дніпро", "Гідропарк", 4),
    ("Гідропарк", "Лівобережна", 3),
    ("Лівобережна", "Дарниця", 4),
    ("Дарниця", "Чернігівська", 3),
    ("Чернігівська", "Лісова", 2)
]

#Синя лінія з вагами, а саме час в хвилинах між станціями
blue_line = [
    ("Героїв Дніпра", "Мінська", 2),
    ("Мінська", "Оболонь", 3),
    ("Оболонь", "Почайна", 4),
    ("Почайна", "Тараса Шевченка", 5),
    ("Тараса Шевченка", "Контрактова площа", 2),
    ("Контрактова площа", "Поштова площа", 3),
    ("Поштова площа", "Майдан Незалежності", 4),
    ("Майдан Незалежності", "Площа Льва Толстого", 1),
    ("Площа Льва Толстого", "Олімпійська", 2),
    ("Олімпійська", "Палац 'Україна'", 2),
    ("Палац 'Україна'", "Либідська", 3),
    ("Либідська", "Деміївська", 2),
    ("Деміївська", "Голосіївська", 3),
    ("Голосіївська", "Васильківська", 4),
    ("Васильківська", "Виставковий центр", 2),
    ("Виставковий центр", "Іподром", 3),
    ("Іподром", "Теремки", 4)
]

#Зелена лінія з вагами, а саме час в хвилинах між станціями
green_line = [
    ("Сирець", "Дорогожичі", 3),
    ("Дорогожичі", "Лук'янівська", 4),
    ("Лук'янівська", "Золоті ворота", 3),
    ("Золоті ворота", "Палац спорту", 2),
    ("Палац спорту", "Кловська", 2),
    ("Кловська", "Печерська", 3),
    ("Печерська", "Дружби народів", 4),
    ("Дружби народів", "Видубичі", 3),
    ("Видубичі", "Славутич", 4),
    ("Славутич", "Осокорки", 3),
    ("Осокорки", "Позняки", 2),
    ("Позняки", "Харківська", 4),
    ("Харківська", "Вирлиця", 3),
    ("Вирлиця", "Бориспільська", 4),
    ("Бориспільська", "Червоний хутір", 5)
]

#Додаємо лінії до графа з вагами
def add_line_with_weights(line):
    for station1, station2, weight in line:
        metro_graph.add_edge(station1, station2, weight=weight)

add_line_with_weights(red_line)
add_line_with_weights(blue_line)
add_line_with_weights(green_line)

#Додаємо пересадки з вагами
metro_graph.add_edge("Театральна", "Золоті ворота", weight=2)  # Червона - Зелена
metro_graph.add_edge("Хрещатик", "Майдан Незалежності", weight=1)  # Червона - Синя
metro_graph.add_edge("Площа Льва Толстого", "Палац спорту", weight=1)  # Синя - Зелена

#Алгоритм Дейкстри для знаходження найкоротшого шляху
def dijkstra(graph, start):
    shortest_paths = {start: (0, [])}  # Відстані та шляхи до станцій
    pq = [(0, start)]  # Черга для обробки вузлів
    while pq:
        current_distance, current_station = heapq.heappop(pq)

        for neighbor, data in graph[current_station].items():
            distance = data['weight']
            new_distance = current_distance + distance

            if neighbor not in shortest_paths or new_distance < shortest_paths[neighbor][0]:
                shortest_paths[neighbor] = (new_distance, shortest_paths[current_station][1] + [neighbor])
                heapq.heappush(pq, (new_distance, neighbor))
    
    return shortest_paths

#Виведення результатів
start_station = "Академмістечко"
shortest_paths = dijkstra(metro_graph, start_station)

print(f"Найкоротші шляхи від станції {start_station}:")
for station, (distance, path) in shortest_paths.items():
    print(f"{station}: Відстань {distance} хвилин, Шлях: {start_station} -> {' -> '.join(path)}")
